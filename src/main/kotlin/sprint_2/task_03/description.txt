Фильтры Instagram

Вы работаете над функцией для Instagram, которая позволяет пользователям накладывать фильтры на свои фотографии. Ваша задача — создать систему, где можно выбрать фильтры и применить их к фотографиям с помощью функций высокого порядка в Java.

Цель:
Создать класс FilterProcessor, который поможет вам применять фильтры к изображениям с помощью функций.

Требования:
1️⃣ Создать класс Image, который хранит информацию о фотографии:

name (имя файла),

description (описание, которое обновляется с каждым применённым фильтром).

2️⃣ Создать класс FilterProcessor с двумя методами:

applyFilter: применяет фильтр к изображению. Фильтр — это функция, которая берёт одно изображение и возвращает новое с изменениями. Метод applyFilter принимает объект типа Image и функцию высокого порядка для применения фильтра, возвращает новый объект типа Image с применённым фильтром

combineFilters: объединяет два фильтра в один, чтобы они применялись последовательно. Принимает две функции высокого порядка и возвращает новую функцию высокого порядка, которая последовательно применяет обе функции.

3️⃣ Создать несколько фильтров (например, "черно-белый", "сепия" и "виньетка") с помощью лямбд.

Пример использования:
Image originalImage = new Image("original.jpg", "Оригинальное изображение");

FilterProcessor filterProcessor = new FilterProcessor();

// Фильтры
Function<Image, Image> grayscaleFilter = (image) -> new Image(image.getName(), image.getDescription() + " | Фильтр: черно-белый");
Function<Image, Image> sepiaFilter = (image) -> new Image(image.getName(), image.getDescription() + " | Фильтр: сепия");

// Применение фильтров
Image grayscaleImage = filterProcessor.applyFilter(originalImage, grayscaleFilter);
System.out.println(grayscaleImage.getDescription()); // Вывод: Оригинальное изображение | Фильтр: черно-белый

Image sepiaImage = filterProcessor.applyFilter(grayscaleImage, sepiaFilter);
System.out.println(sepiaImage.getDescription()); // Вывод: Оригинальное изображение | Фильтр: черно-белый | Фильтр: сепия

// Комбинирование фильтров
Function<Image, Image> combinedFilter = filterProcessor.combineFilters(grayscaleFilter, sepiaFilter);
Image combinedImage = filterProcessor.applyFilter(originalImage, combinedFilter);
System.out.println(combinedImage.getDescription()); // Вывод: Оригинальное изображение | Фильтр: черно-белый | Фильтр: сепия

Почему эта задача полезна?
С помощью функций высокого порядка, можно передавать в методы действия в виде лямбда-выражений, что позволяет писать новые фильтры для такой системы, как Instagram, гораздо быстрее. Разработчику просто нужно создать дополнительную лямбду — она и будет новым фильтром. А больше ничего менять не требуется!

Но более того, их ещё и можно комбинировать! Например, в приложении Lensa можно наложить на фотографию несколько фильтров. И в этой задаче мы как раз комбинируем функции, чтобы сделать действительно крутую фичу в нашем приложении!